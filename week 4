#include <stdio.h>
#include <stdlib.h>    // malloc(),free 함수가 포함된 헤더파일
#include <time.h>

 

                           /* Method Declaration */

int** create_matrix(int row, int col); // 2차원 배열을 동적으로 할당하는 함수
void print_matrix(int** matrix, int row, int col); //   행렬을 출력하는 함수
int free_matrix(int** matrix, int row, int col); // 메모리를 해제함
int fill_data(int** matrix, int row, int col); // 행렬에 랜덤으로 값을 할당 받음
int addition_matrix(int** matrix_a, int** matrix_b, int row, int col); // 행렬의 합 함수
int subtraction_matrix(int** matrix_a, int** matrix_b, int row, int col); // 행렬의 차 함수
int transpose_matrix(int** matrix, int** matrix_t, int row, int col); // A의 전치행렬 T 구하기
int multiply_matrix(int** matrix_a, int** matrix_t, int row, int col); // 행렬과 전치행렬 곱 구하는 함수
 

int main()

{
    char command; // 메뉴판 이니셜을 받을 변수

    printf("[----- Seojin LEE  2020039034 -----]\n");

    int row, col;
    srand(time(NULL));     // 난수 생성

    printf("input row and col : ");
    scanf("%d %d", &row, &col);             // 행과 열의 수 입력 받기
    int** matrix_a = create_matrix(row, col);
    int** matrix_b = create_matrix(row, col);
    int** matrix_a_t = create_matrix(col, row);

    printf("Matrix Created.\n");

    if (matrix_a == NULL || matrix_b == NULL)   { return -1; }  

    do {

        printf("----------------------------------------------------------------\n");
        printf("                     Matrix Manipulation                        \n");
        printf("----------------------------------------------------------------\n");
        printf(" Initialize Matrix   = z           Print Matrix        = p \n");
        printf(" Add Matrix          = a           Subtract Matrix     = s \n");
        printf(" Transpose matrix_a  = t           Multiply Matrix     = m \n");
        printf(" Quit                = q \n");
        printf("----------------------------------------------------------------\n");
       
        printf("Command = ");
        scanf(" %c", &command);           //명령어 입력받기


        switch (command) {                // 행렬에 랜덤으로 값을 할당 받음
        
        case 'z': case 'Z':                //'z' 일 때 행렬 초기 설정하기
            printf("Matrix Initialized\n");
            fill_data(matrix_a, row, col);          //함수 호출
            fill_data(matrix_b, row, col);
            break;

        case 'p': case 'P':                //' p' 일 때 행렬 출력
            printf("Print matrix\n");
            printf("matrix_a\n");
            print_matrix(matrix_a, row, col);
            printf("matrix_b\n");
            print_matrix(matrix_b, row, col);
            break;

        case 'a': case 'A':                 // 'a'일 때 행렬 더함
            printf("Add two matrices\n");
            addition_matrix(matrix_a, matrix_b, row, col);
            break;

        case 's': case 'S':                // 's'일 때 행렬 빼기
            printf("Subtract two matrices \n");
            subtraction_matrix(matrix_a, matrix_b, row, col);
            break;

        case 't': case 'T':             //'t'일 때 A의 전치행렬 구하기
            printf("Transpose matrix_a \n");
            printf("matrix_a\n");
            transpose_matrix(matrix_a, matrix_a_t, col, row);
            print_matrix(matrix_a_t, col, row);
            break;

        case 'm': case 'M':               //'m'일 때 행렬 * 전치행렬
            printf("Multiply matrix_a with transposed matrix_a \n");
            transpose_matrix(matrix_a, matrix_a_t, col, row);
            multiply_matrix(matrix_a, matrix_a_t, row, col);
            break;

        case 'q': case 'Q':               // 'q'일 때 메모리 해제
            printf("Free all matrices..\n");
            free_matrix(matrix_a_t, col, row);
            free_matrix(matrix_a, row, col);
            free_matrix(matrix_b, row, col);
            break;

        default:
            printf("\n       >>>>>   Concentration!!   <<<<<     \n");
            break;

        }

    } while (command != 'q' && command != 'Q');       //'q'가 나오면 종료

    return 1;
    
}




/* create a 2d array whose size is row x col using malloc() */
int** create_matrix(int row, int col)         //2차원 배열 동적 메모리 할당

{
    /* check pre condition */ 
    if (row <= 0 || col <= 0)             // 입력받은 row나 col의 값이 음수라면, -1을 리턴 
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }

    int** n;
    n = (int**)malloc(sizeof(int*) * row);           // n에 row*int size를 할당

    for (int i = 0; i < row; i++)                     // 행의 수만큼 반복
        n[i] = (int*)malloc(sizeof(int) * col);           //열 동적 메모리 할당                                         

    return n;                  // 생성된 2차원 배열을 가리키는 이중포인터 리턴

}

 
 

/* print matrix whose size is row x col */
void print_matrix(int** matrix, int row, int col)

{
    for (int i = 0; i < row; i++)           //순차적으로 행렬 출력
    {
        for (int j = 0; j < col; j++)
        {
            printf("%3d ", matrix[i][j]); 
        }
        printf("\n");
    }
}

 
 

///* free memory allocated by create_matrix() */
int free_matrix(int** matrix, int row, int col)
{
    /* check pre condition */ 
    if (row <= 0 || col <= 0)       // 입력받은 row, col이 음수면 -1 값 반환
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }


    /* check post condition */
    if (matrix == 0)         // 정상적인 동적할당이 아니면 -1 값 반환
    {
        printf("Matrix is not valid. \n");   
        return -1;
    }

    for (int i = 0; i < row; i++)           // 데이터가 들어있는 메모리 해제
        free(matrix[i]);
        
    free(matrix);                       // 각 행들의 주소값 담은 메모리 해제
    
    return 1;
}




/* assign random values to the given matrix */
int fill_data(int** matrix, int row, int col)
{
    /* check pre condition */       // 입력받은 row, col이 음수면 -1 값 반환
    if (row <= 0 || col <= 0)
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
            matrix[i][j] = rand() % 20; //랜덤을 20으로 나눠 나머지가 0에서 19사이의 값으로 나오도록 설정
    }


    /* check post condition */
    if (matrix == NULL)       // 정상적인 동적할당이 아니면 -1 값 반환
    {
        printf("Matrix is not valid.\n");
        return -1;
    }

    return 1;

}

 


/* matrix_sum = matrix_a + matrix_b */
int addition_matrix(int** matrix_a, int** matrix_b, int row, int col)
{
    int** matrix_sum = create_matrix(row, col); // 행렬의 합을 저장할 공간 할당하기


    /* check pre condition */ 
    if (row <= 0 || col <= 0)
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }

    for (int i = 0; i < row; i++)            //matrix_a과 matrix_b을 합함 
    {
        for (int j = 0; j < col; j++)
            matrix_sum[i][j] = matrix_a[i][j] + matrix_b[i][j];
    }

    print_matrix(matrix_sum, row, col);     //출력

    /* check post condition */
    if (matrix_a == 0 || matrix_b == 0)      // 두 행렬 중 하나라도 제대로 할당을 받지 못하면 실패문장 출력
    {                                           
        printf("Matrix is not valid.\n");
        return -1;
    }
    return 1;
    
}
    
    
    
    
/* matrix_sub = matrix_a - matrix_b */
int subtraction_matrix(int** matrix_a, int** matrix_b, int row, int col)
{
    int** matrix_sub = create_matrix(row, col);          // 행렬의 차를 저장할 공간 할당하기

    /* check pre condition */ //   
    if (row <= 0 || col <= 0)
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }

    for (int i = 0; i < row; i++)              //matrix_a과 matrix_b의 차를 구함
    {
        for (int j = 0; j < col; j++)
            matrix_sub[i][j] = matrix_a[i][j] - matrix_b[i][j];
    }
    
    print_matrix(matrix_sub, row, col);     //출력


    /* check post condition */
    if (matrix_a == 0 || matrix_b == 0)        // 두 행렬 중 하나라도 제대로 할당을 받지 못하면 실패문장 출력
    {
        printf("Matrix is not valid.\n");
        return -1;
    }
    
    return 1;
}




/* transpose the matrix to matrix_t */
int transpose_matrix(int** matrix, int** matrix_t, int row, int col)
{
    /* check pre condition */      
    if (row <= 0 || col <= 0)           // row 또는 col의 값이 음수면 -1을 리턴
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }


    /* check post condition */
    if (matrix == 0 || matrix_t == 0)    // 두 행렬 중 하나라도 제대로 할당을 받지 못하면 실패문장 출력
    {
        printf("Matrix is not valid.\n");
        return -1;
    }
    
    for (int j = 0; j < row; j++)         // 두 행렬을 서로 교환
    {
        for (int i = 0; i < col; i++)
        {
            matrix_t[j][i] = matrix[i][j];
        }
    }

    return 1;
}




/* matrix_axt  matrix_a x matrix_t */
int multiply_matrix(int** matrix_a, int** matrix_t, int row, int col)
{
    /* check pre condition */ 
    if (row <= 0 || col <= 0)        // row 또는 col의 값이 음수면 -1을 리턴
    {
        printf("Check the sizes of row and col!\n");
        return -1;
    }

    int** matrix_axt = create_matrix(row, row); // A 행렬*전치행렬 값을 저장할 새로운 메모리공간 할당
    int sum = 0;
    int i, j;
    
    for (i = 0; i < row; i++)                // row*row  
    {
        for (j = 0; j < row; j++)
        {
            sum = 0;                
            for (int k = 0; k < col; k++)
            {
                sum += (matrix_a[i][k] * matrix_t[k][j]);    //순차적으로 행렬과 전치행렬의 곱을 더해 sum에 저장 
            }
            
            matrix_axt[i][j] = sum; // 더한 값을 순차적으로 대입
        }
    }
    
    print_matrix(matrix_axt, row, row);


    /* check post condition */
    if (matrix_a == 0 || matrix_t == 0)       // 두 행렬 중 하나라도 제대로 할당을 받지 못하면 실패문장 출력함
    {
        printf("Matrix is not valid.\n");
        return -1;
    }

    return 1;
}
